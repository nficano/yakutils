"""This module contains boilerplate csv helpers."""
import csv
import pathlib
from typing import Union

__all__ = ["read_csv", "write_csv"]


def read_csv(filename: Union[pathlib.Path, str]):
    """Read a CSV file.

    **Example**:

    >>> read_csv('/path/to/data.csv')
    [{ 'name': 'foo' }]

    :param filename:
        Path to CSV file.
    :return:
        A Python representation of the CSV document.
    """
    if isinstance(filename, str):
        filename = pathlib.Path(filename)
    with open(filename) as fh:
        fields = fh.readline().replace('"', "").replace("\n", "").split(",")
        reader = csv.DictReader(fh, fieldnames=fields)
        return list(dict(row) for row in reader)


def write_csv(
    list_of_dicts: list,
    filename: Union[pathlib.Path, str],
    delimiter: str = ",",
    quotechar: str = '"',
    quoting: int = csv.QUOTE_MINIMAL,
):
    """
    Write a list of dictionaries to a csv file.

    :param list list_of_dicts:
        A list of dictionaries.
    :param Union[pathlib.Path, str] filename:
        The name of the csv file that will be created.
    :param str delimiter:
        A character string used to separate fields, defaults to ','.
    :param str quotechar:
        A character string used to quote fields containing special
        characters, defaults to '"'.
    :param Union[pathlib.Path, str] quoting:
        Control when quotes should be generated by the writer
        and recognised by the reader, defaults to csv.QUOTE_MINIMAL.
    """
    if isinstance(filename, str):
        filename = pathlib.Path(filename)
    with open(filename, "w", encoding="utf-8") as fh:
        writer = csv.DictWriter(
            f=fh,
            delimiter=delimiter,
            quotechar=quotechar,
            quoting=quoting,
            fieldnames=list_of_dicts[0].keys(),
        )
        writer.writeheader()
        writer.writerows(list_of_dicts)
